function [t,V_in,Q_in,Q_out]=cap_flow(d,chan,Q,V_pump,n)%this program models flow through the scaffold%inputs: capacitor diameter - 13, number of channels - 861, flow rate - 1 uL/chan/min,%inputs: pumping chamber volume - 0.93 uL%inputs: effective area of filter (1 for channels, 2 for entire filter, 0.1 for filled channels)%outputs: flow through scaffold, flow from pump, time vector%outputs: volume through the scaffold, volume from the pump%pump breaks down at frequencies above 35 Hz E=.3749;							%membrane E/thickness (N/mm) %determining hydraulic resistanceif n==1    m='Assumes fluidic resistance from empty channels'elseif n==2    m='Assumes fluidic resistance from the entire filter'elseif n==.1    m='Assumes fluidic resistance from full channels'else    m='Unknown Fluidic Resistance'endhp_filt=73.5;						%filter hydraulic permeability (mL/s)/(N/sq mm)/cm^2area_chan=pi*(.34/2)^2*10^-2;		%channel area (cm^2)area_t=area_chan*chan*n;			%effective filter area (cm^2) (ASSUMES EMPTY CHANNELS)resist=10^-3/(area_t*hp_filt);			%fluidic resistance (N/sq mm)/(킠/s) %pumping parametersdel_t=.01;							%time to pump one stroke (s)t_cycle=V_pump*60/(Q*chan); 		%pump cycle time (s), governed by desired flow, typ=.0612Q_p=V_pump/del_t;					%flow into capacitor (when flow occurs) (킠/s)V_valve=.16;						%volume of the valves (킠)Q_v=V_valve/del_t;					%flow into and from valves %finds starting point for quasi steady statep_0=Q*chan/60*resist*10^6;    		%finds the initial pressure required to flow at average rate									%multiplying by 10^6 improves the accuracy of the calculationr_0=d/10*(2*E/p_0)^(1/2.5);   		%estimates r from popt=optimset('Display','off');r_0=real(fsolve(@(r) find_rp(r,p_0,E,d), r_0, opt));  						% finds r from p & estimated rV_0=pi/24*(16*r_0^3-(8*r_0^2+d^2)*(4*r_0^2-d^2)^(1/2))-V_pump*.5; 	%finds initial capacitor volume %sets up the time vector for the modeldt=del_t/10;							%time increments in output(sec)total_time=300*dt;					%total time (sec)a=0;for i=1:(total_time/dt)    t(i)=a;    a=a+dt;end %creates flow pattern to the capacitor from the pump, Q_in (킠/sec)if (V_pump>4*V_valve)    %neglects the volume of valves    for i=1:length(t)        if (t(i) <= t_cycle)            if (t(i) <= del_t)                Q_in(i)=Q_p;            else                Q_in(i)=0;            end            a=i-1;        else            Q_in(i)=Q_in(i-a);        end    endelse    %includes the valve volume    for i=1:length(t)        if (t(i) <= t_cycle)            if (t(i) <= del_t)                Q_in(i)=Q_p;            elseif (t(i) <= t_cycle/4)                Q_in(i)=0;            elseif (t(i) <= t_cycle/4+del_t)                Q_in(i)=Q_v;            elseif (t(i) <= 3*t_cycle/4)                Q_in(i)=0;            elseif (t(i) <= 3*t_cycle/4+del_t)                Q_in(i)=-1*Q_v;            else                Q_in(i)=0;            end            a=i-1;        else            Q_in(i)=Q_in(i-a);        end    endend %finds the flow pattern from the capacitor through the cells, Q_out (킠/sec)V(1)=V_0;r(1)=r_0;for i=1:length(t)    r(i+1)=fsolve(@(r) find_rv(r,V(i),d), r(i), opt);    p(i)=4*E/d*(asin(d/(2*r(i)))-d/(2*r(i)));    Q_out(i)=p(i)/resist;    V(i+1)=Q_in(i)*dt-Q_out(i)*dt+V(i);    h(i)=r(i+1)-((r(i+1))^2-(d/2)^2)^(1/2);  % finds the deflection of the capacitorend Q_in=Q_in*60/chan;   				%converts to 킠/chan/minQ_out=Q_out*60/chan;    			%converts to 킠/chan/mint=t*1000;               					%converts the time to ms%t=t/60;                 					%converts to time in minutes V_in(1)=0;V_out(1)=0;for i=2:length(t)    V_in(i)=Q_in(i)*dt/60+V_in(i-1);    V_out(i)=Q_out(i)*dt/60+V_out(i-1);end freqency=round((1/t_cycle)*10)/10  	%prints the pump frequencytime_per_delay=.202;        			%time (ms) per controller delaycontroller_delay=round(t_cycle*10^3/(4*time_per_delay))	%calculates the delay for the controllermaximum_deflection=max(h)     		%finds the maximum deflection of the capacitormaximum_flowrate=max(Q_out)   	%prints the maximum flow rate (킠/channel/min) subplot(2,1,1), plot(t,Q_out,t,Q_in), xlabel('time (ms)'), ylabel('flow rate (uL/channel/min)'), axis tightsubplot(2,1,2), plot(t,V_out,t,V_in), xlabel('time (ms)'), ylabel('volume pumped (uL/channel)'), axis tight