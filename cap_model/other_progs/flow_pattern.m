function [Q_in,V_in,t]=flow_pattern(V_pump,V_valve,times,pump_cycles)%this program models flow from the pump%inputs: pumping chamber volume - 0.93 uL, valve volume - 0.16 uL%inputs: time vector for each step of the cycle (6 elements, in ms)%inputs: the number of pump cycles to analyze%outputs: flow from pump, time vector, flow rate%pumping parametersdt_pump=5;                         %time to pump one stroke (ms)dt_valve=2;                         %time to open valve (ms)Q_p=V_pump/dt_pump*1000;            %flow into capacitor (uL/sec)Q_v=V_valve/dt_valve*1000;          %flow into and from valves (uL/sec)%sets up the time vector for the model (in ms)cycle_time=sum(times)               %total time of 1 pump cycle (ms)total_time=round(cycle_time*pump_cycles);  %total time analyzed (ms)for i=1:total_time    t(i)=i;end%creates flow pattern to the capacitor from the pump, Q_in (µL/sec)count=1;for i=1:length(t)    if t(i) >= cycle_time*count         count=count+1;    end    if t(i) <= dt_pump+cycle_time*(count-1)        Q_in(i)=Q_p;    elseif t(i) <= times(1)+cycle_time*(count-1)        Q_in(i)=0;    elseif t(i) <= times(1)+dt_valve+cycle_time*(count-1)        Q_in(i)=Q_v;    elseif t(i) <= sum(times(1:5))+cycle_time*(count-1)        Q_in(i)=0;    elseif t(i) <= sum(times(1:5))+dt_valve+cycle_time*(count-1)        Q_in(i)=-1*Q_v;    else        Q_in(i)=0;    endendV_in(1)=0;%V_out(1)=0;for i=2:length(t)    V_in(i)=Q_in(i-1)*10^-3+V_in(i-1);%    V_out(i)=Q_out(i)*10^-3+V_out(i-1);endQ_in=Q_in*60/1000;                  %converts to mL/min%Q_out=Q_out*60/1000;                %converts to mL/minfreqency=round((1/cycle_time)*100)/100  	%prints the pump frequencyflow_rate=V_pump/cycle_time*60          %prints the flow ratesubplot(2,1,1), plot(t,Q_in), xlabel('time (ms)'), ylabel('flow rate (mL/min)'), axis tightsubplot(2,1,2), plot(t,V_in), xlabel('time (ms)'), ylabel('volume pumped (uL)')