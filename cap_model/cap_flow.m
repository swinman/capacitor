function [FS,t,V_out,V_in,Q_out,Q_in]=cap_flow(d,times,IC,pump_cycles,resist,name)%this program models flow through the scaffold%inputs: capacitor diameter - 13, number of channels - 861, flow rate - 1 uL/chan/min,%inputs: pumping chamber volume - 0.93 uL%inputs: effective area of filter (1 for channels, 2 for entire filter, 0.1 for filled channels)%outputs: flow through scaffold, flow from pump, time vector%outputs: volume through the scaffold, volume from the pump%pump breaks down at frequencies above 35 Hz%capacitor parameters%E=.3749;           		%membrane E/thickness (N/mm)%resist=10^-5;           %resistance in (N/sq mm)/(uL/sec)%real parametersE=.3749;							%membrane E/thickness (N/mm)%resist=6.75935e-05;                 %resistance in (N/sq mm)/(uL/sec)%max_cap_vol=2/3*pi*(d/2)^3;         %maximum volume capacitor can hold (uL)%sets up the time vector for the model (in ms)cycle_time=sum(times);              %total time of 1 pump cycle (ms)total_time=round(cycle_time*pump_cycles);  %total time analyzed (ms)for i=1:total_time    t(i)=i;end%pumping parametersV_pump=1.08;                        %volume of the pump (uL)V_valve=0.17;                       %volume of the valves (uL)dt_pump=5;                          %time to pump one stroke (ms)dt_valve=2;                         %time to open valve (ms)Q_p=V_pump/dt_pump*1000;            %flow into capacitor (uL/sec)Q_v=V_valve/dt_valve*1000;          %flow into and from valves (uL/sec)%creates flow pattern to the capacitor from the pump, Q_in (µL/sec)count=1;for i=1:length(t)    if t(i) >= cycle_time*count         count=count+1;    end    if t(i) <= dt_pump+cycle_time*(count-1)        Q_in(i)=Q_p;    elseif t(i) <= times(1)+cycle_time*(count-1)        Q_in(i)=0;    elseif t(i) <= times(1)+dt_valve+cycle_time*(count-1)        Q_in(i)=Q_v;    elseif t(i) <= sum(times(1:5))+cycle_time*(count-1)        Q_in(i)=0;    elseif t(i) <= sum(times(1:5))+dt_valve+cycle_time*(count-1)        Q_in(i)=-1*Q_v;    else        Q_in(i)=0;    endend%finds a starting point for the pump when equilibrium flows are reachedflow_rate=V_pump/cycle_time*60;          %finds & prints the flow rate (mL/min)opt=optimset('Display','off');if IC == 0    p_0=(flow_rate*1000/60)*resist*10^6;%finds the initial pressure required to flow at average rate                                        %multiplying by 10^6 improves the accuracy of the calculation%    r_0=d/10*(2*E/p_0)^(1/2.5)   		%estimates r from p (p is in N/sq mm)    r_0(1)=d/2*1.01;                    %gives a starting value for r    r_0(2)=1000*d;                      %gives a starting value for r        r_0=fzero(@(r) find_rp(r,p_0,E,d), r_0, opt); 						% finds r from p & estimated r    V_0=pi/24*(16*r_0^3-(8*r_0^2+d^2)*(4*r_0^2-d^2)^(1/2));%-V_pump*.5; 	%finds initial capacitor volumeelse    r_0=IC(1);    V_0=IC(2);end%finds the flow pattern from the capacitor through the cells, Q_out (µL/sec)V(1)=V_0;r(1)=r_0;for i=1:length(t)    if V(i) > 0        [r(i+1),vlu,xtf]=fzero(@(r) find_rv(r,V(i),d), r(i), opt);%        which=1;        if imag(r(i+1)) ~= 0            [r(i+1),vlu,xtf]=fzero(@(r) find_rv(r,V(i),d), r(i)*10, opt);%            which=2;        end        if xtf == -4            [r(i+1),vlu,xtf]=fzero(@(r) find_rv(r,V(i),d), [d/2 r(i)*1000], opt);        end%        if abs(vlu) >= 10^-6%            which=which%            exit_value=vlu%            ext_flag=xtf%            radius=r(i+1)%            rad=r(i)%            volume=V(i)%            iteration=i%            '-----------------'%            [r(i+1),vlu,xtf]=fzero(@(r) find_rv(r,V(i),d), r(i), opt);%            which=3;%        end        p(i)=4*E/d*(asin(d/(2*r(i)))-d/(2*r(i)));        Q_out(i)=p(i)/resist;    elseif V(i) < 0        V(i)=V(i)*-1;        [r(i+1),vlu,xtf]=fzero(@(r) find_rv(r,V(i),d), r(i), opt);        if imag(r(i+1)) ~= 0            [r(i+1),vlu,xtf]=fzero(@(r) find_rv(r,V(i),d), r(i)*10, opt);        end        if xtf == -4            [r(i+1),vlu,xtf]=fzero(@(r) find_rv(r,V(i),d), [d/2 r(i)*1000], opt);        end        V(i)=V(i)*-1;        p(i)=4*E/d*(asin(d/(2*r(i)))-d/(2*r(i)));        Q_out(i)=p(i)/resist*-1;    else        Q_out(i)=0;        r(i+1)=r(i);    end    if abs(vlu) >= 10^-6 | xtf ~= 1        exit_value=vlu        ext_flag=xtf        final_radius=r(i+1)        initial_radius=r(i)        volume=V(i)        iteration=i        '-----------------'    end    V(i+1)=Q_in(i)*0.001-Q_out(i)*0.001+V(i);%    if V(i+1) > max_cap_vol%        'Volume in capcitor exceeds half sphere volume'%    end%    h(i)=r(i+1)-((r(i+1))^2-(d/2)^2)^(1/2);  % finds the deflection of the capacitorendFS(1)=r(length(V));FS(2)=V(length(V));V_in(1)=0;V_out(1)=0;for i=2:length(t)    V_in(i)=Q_in(i-1)*10^-3+V_in(i-1);    V_out(i)=Q_out(i-1)*10^-3+V_out(i-1);endQ_in=Q_in*60/1000;                  %converts to mL/minQ_out=Q_out*60/1000;                %converts to mL/min%freqency=round((1/cycle_time)*100)/100  	%prints the pump frequency%maximum_deflection=max(h)     		%finds the maximum deflection of the capacitordlmwrite(name,[t' V_out'],'\t')plot(t,V_out,t,V_in), xlabel('time (ms)'), ylabel('volume pumped (uL)')%subplot(2,1,1), plot(t,Q_out,t,Q_in), xlabel('time (ms)'), ylabel('flow rate (mL/min)'), axis tight%subplot(2,1,2), plot(t,V_out,t,V_in), xlabel('time (ms)'), ylabel('volume pumped (uL)'), axis tight